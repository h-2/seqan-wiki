'''Note: this page documents the 1.4 version of SeqAn, see [wiki:Tutorial] if you need the documentation for the trunk version.'''
= Tutorial q-gram Index =

[[TOC]]

 Learning Objective ::
 You will know the features of the q-gram Index, how it can be used for searching and how to access the different fibres.
 Difficulty ::
  Average
 Duration ::
  1h
 Prerequisites ::
  [wiki:Tutorial/Sequences], [wiki:Tutorial/Iterators]

== The q-gram Index ==
A q-gram index can be used to efficiently retrieve all occurrences of a certain q-gram in the text.
It consists of various tables, called fibres (see [wiki:HowTo/AccessIndexFibres HowTo]), to retrieve q-gram positions, q-gram counts, etc.
However, it has no support for suffix tree iterators.
A q-gram index must be specialized with a seqan:Class.Shape type.
A seqan:Class.Shape defines q, the number of characters in a q-gram and possibly gaps between these characters.
There are different specializations of seqan:Class.Shape available:

|| '''Specialization''' || '''Modifiable*''' || '''Number of Gaps''' ||
|| seqan:Spec.UngappedShape || - || 0 ||
|| seqan:Spec.SimpleShape || + || 0 ||
|| seqan:Spec.OneGappedShape || + || 0/1 ||
|| seqan:Spec.GappedShape || - || any ||
|| seqan:Spec.GenericShape || + || any ||

* - ''fixed at compile time'', + ''can be changed at runtime''

Each shape evaluates a gapped or ungapped sequence of q characters to a hash value by the Functions seqan:Function.hash, seqan:Function.hashNext, etc.
For example, the shape 1101 represents a 3-gram with one gap of length 1.
This shape overlayed with the seqan:Spec.Dna text "GATTACA" at the third position corresponds to "TT-C".
The function seqan:Function.hash converts this 3-gram into 61=(('''3'''*4+'''3''')*4+'''1'''. 4 is the alphabet size in this example (see seqan:Metafunction.ValueSize).

The q-gram index offers different functions to search or count occurrences of q-grams in an indexed text, see seqan:Function.getOccurrences, seqan:Function.countOccurrences.
A q-gram index over a seqan:Class.StringSet stores occurrence positions in the same way as the ESA index and in the same fibre (FibreSA).
If only the number of q-grams per sequence are needed the QGramCounts and QGramCountsDir fibres can be used.
They store pairs `(seqNo, count)`, `count`>0, for each q-gram that occurs `counts` times in sequence number `seqNo`.

To efficiently retrieve all occurrence positions or all pairs `(seqNo, count)` for a given q-gram, these positions or pairs are stored in contiguous blocks (in QGramSA, QGramCounts fibres), called buckets.
The begin position of bucket i is stored in directory fibres (QGramDir, QGramCountsDir) at position i, the end position is the begin positions of the bucket i+1.
The default implementation of the seqan:Spec.IndexQGram index maps q-gram hash values 1-to-1 to bucket numbers.
For large q or large alphabets the seqan:Spec.OpenAddressing index can be more appropriate as its directories are additionally bound by the text length.
This is realized by a non-trivial mapping from q-gram hashes to bucket numbers that requires an additional fibre (QGramBucketMap).

For more details on q-gram index fibres see the [wiki:HowTo/AccessIndexFibres HowTo] or seqan:"Tag.QGram Index Fibres".

== Example ==
We want to construct the q-gram index of the string "CATGATTACATA" and output the occurrences of the ungapped 3-gram "CAT".
As 3 is fixed at compile-time and the shape has no gaps we can use a seqan:Spec.UngappedShape which is the first template argument of seqan:Spec.IndexQGram, the second template argument of seqan:Class.Index.
Next we create the string "CATGATTACATA" and specialize the first index template argument with the type of this string. The string can be given to the index constructor.
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/index/index_qgram.cpp, fragment=initialization)]]

To get all occurrences of a q-gram, we first have to hash it with a shape of the same type as the index shape (we can even use the index shape returned by seqan:Function.indexShape).
The hash value returned by seqan:Function.hash or seqan:Function.hashNext is also stored in the shape and is used by the function seqan:Function.getOccurrences to retrieve all occurrences of our 3-gram.
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/index/index_qgram.cpp, fragment=output)]]

Program output:
{{{
#!html
<pre class="wiki" style="background-color:black;color:lightgray">
0
8
</pre>
}}}

=== Assignment 1 ===
{{{#!AssignmentBox
 Type ::
 Review
 Objective ::  
 Write a program that outputs all occurrences of the gapped q-gram "AT-A" in "CATGATTACATA".
 Solution :: 
 Click [wiki:Tutorial/Indices/Assignment5 more]
}}}

=== Assignment 2 ===
{{{#!AssignmentBox
  Type ::
 Review
 Objective :: 
 Create and output a matrix M where M(i,j) is the number of common ungapped 5-grams between sequence i and sequence j for 3 random seqan:Spec.Dna sequences, each not longer than 200 characters. Optional: Run the matrix calculation twice, once for an seqan:Spec.IndexQGram and once for an seqan:Spec.OpenAddressing index and output the directory sizes (QGram_Dir, QGram_CountsDir fibre).[[br]]
 Hint :: A common g-gram that occurs a times in one and b times in the other sequence counts for min(a,b).
 Solution ::  
 Click [wiki:Tutorial/Indices/Assignment6 more]
}}}