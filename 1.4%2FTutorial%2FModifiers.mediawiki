'''Note: this page documents the 1.4 version of SeqAn, see [wiki:Tutorial] if you need the documentation for the trunk version.'''
= Modifiers =

[[TOC]]

Modifiers give a different view to other classes. 

== Overview ==

Modifiers can be used to change the elements of a container without touching them. For example, someone gave you an algorithm that works on 2 arbitrary strings, but you want to use it for the special pair of a string and its reverse (left-to-right mirror). The classical approach would be to make a copy of the one string, where all elements are mirrored from left to right and call the algorithm with both strings. With modifiers you can create the reverse in O(1) extra memory without copying the original string. This can be handy if the original sequence is large.

Modifiers implement a certain concept (e.g. seqan:Concept.Container, [seqan:Concept.RandomAccessIteratorConcept Iterator], ...) or class interface (seqan:Class.String, ...)
and thus can be used as such. The mirror modifier is already part of SeqAn and implements the class interface of seqan:Class.String and can be used in every algorithm that works on strings.

== The Modified String ==

The seqan:Class.ModifiedString is a modifier that implements the seqan:Class.String interface and thus can be used like a seqan:Class.String. It has 2 template parameters. The first one specifies a sequence type (e.g. seqan:Class.String, seqan:Class.Segment, ...) and the second one specifies the modifiers behavior. That can be seqan:Spec.ModReverse for mirroring a string left to right or seqan:Spec.ModView for applying a function to every single character (like 'C'->'G', 'A'->'T', ...).

=== ModReverse ===

We begin with the example from the first section. We have a given string:
{{{
#!cpp
String<char> myString = "A man, a plan, a canal-Panama";
}}}

and want to get the reverse. So we need a seqan:Class.ModifiedString specialized with {{{String<char>}}} and seqan:Spec.ModReverse.
We create the modifier and link it with {{{myString}}} with:

{{{
#!cpp
ModifiedString< String<char>, ModReverse > myModifier(myString);
}}}

The result is:
{{{
#!cpp
::std::cout << myString << ::std::endl;
::std::cout << myModifier << ::std::endl;
}}}
{{{
#!html
<pre class="wiki" style="background-color:black;color:lightgray">
A man, a plan, a canal-Panama
amanaP-lanac a ,nalp a ,nam A
</pre>
}}}

To verify that we didn't copy {{{myString}}}, we replace an infix of the original string and see that, as a side effect, the modified string has also changed:
{{{
#!cpp
infix(myString, 9, 9) = "master ";

::std::cout << myString << ::std::endl;
::std::cout << myModifier << ::std::endl;
}}}
{{{
#!html
<pre class="wiki" style="background-color:black;color:lightgray">
A man, a master plan, a canal-Panama
amanaP-lanac a ,nalp retsam a ,nam A
</pre>
}}}

[seqan:Demo.ModReverse Click here] to see the complete source code of the seqan:Spec.ModReverse example.

=== ModView ===
Another specialization of the seqan:Class.ModifiedString is the seqan:Spec.ModView modifier. Assume we need all characters of {{{myString}}} to be in upper case without copying {{{myString}}}. In SeqAn you first create a functor (a STL unary function) which converts a character to its upper-case character:

{{{
#!cpp
struct MyFunctor : public ::std::unary_function<char,char> 
{
    inline char operator()(char x) const 
    {
        if (('a' <= x) && (x <= 'z')) return (x + ('A' - 'a'));
        return x; 
    }
};
}}}

and then create a seqan:Class.ModifiedString specialized with {{{ModView<MyFunctor>}}}:

{{{
#!cpp
ModifiedString< String<char>, ModView<MyFunctor> > myModifier(myString);
}}}

The result is:
{{{
#!cpp
::std::cout << myString << ::std::endl;
::std::cout << myModifier << ::std::endl;
}}}

{{{
#!html
<pre class="wiki" style="background-color:black;color:lightgray">
A man, a plan, a canal-Panama
A MAN, A PLAN, A CANAL-PANAMA
</pre>
}}}

The upper-case functor and some other predefined functors are part of SeqAn (in seqan/modifier/modifier_functors.h) already.
The following functors can be used as an argument of seqan:Spec.ModView:
||'''Functor'''||'''Description'''||
||{{{FunctorUpcase<TValue>}}}||Converts each character of type {{{TValue}}} to its upper-case character||
||{{{FunctorLowcase<TValue>}}}||Converts each character to type {{{TValue}}} to its lower-case character||
||{{{FunctorComplement<Dna>}}}||Converts each nucleotide to its complementary nucleotide||
||{{{FunctorComplement<Dna5>}}}||The same for the seqan:Spec.Dna5 alphabet||
||{{{FunctorConvert<TInValue,TOutValue>}}}||Converts the type of each character from {{{TInValue}}} to {{{TOutValue}}}||

So instead of defining your own functor we could have used a predefined one:
{{{
#!cpp
ModifiedString< String<char>, ModView<FunctorUpcase<char> > > myModifier(myString);
}}}

[seqan:Demo.ModView Click here] to see the complete source code of the seqan:Spec.ModView example.

=== Shortcuts ===

For some commonly used modifiers you can use the following shortcuts:
||'''Shortcut'''||'''Substitution'''||
||{{{ModComplementDna}}}||{{{ModView< FunctorComplement<Dna> >}}}||
||{{{ModComplementDna5}}}||{{{ModView< FunctorComplement<Dna5> >}}}||
||{{{DnaStringComplement}}}||{{{ModifiedString< DnaString, ModComplementDna >}}}||
||{{{Dna5StringComplement}}}||{{{ModifiedString< Dna5String, ModComplementDna5 >}}}||
||{{{DnaStringReverse}}}||{{{ModifiedString< DnaString, ModReverse >}}}||
||{{{Dna5StringReverse}}}||{{{ModifiedString< Dna5String, ModReverse >}}}||
||{{{DnaStringReverseComplement}}}||{{{ModifiedString< ModifiedString< DnaString, ModComplementDna >, ModReverse >}}}||
||{{{Dna5StringReverseComplement}}}||{{{ModifiedString< ModifiedString< Dna5String, ModComplementDna5 >, ModReverse >}}}||

== The Modified Iterator ==

We have seen how a seqan:Class.ModifiedString can be used to modify strings without touching or copying original data.
The same can be done with iterators. The seqan:Class.ModifiedIterator implements the [seqan:Concept.RandomAccessIteratorConcept Iterator] concept and thus can be used in every algorithm or data structure that expects an iterator. In fact, we have already used the seqan:Class.ModifiedIterator unknowingly in the examples above, as in our cases the seqan:Class.ModifiedString returns a corresponding seqan:Class.ModifiedIterator via the seqan:Metafunction.Iterator meta-function. The main work is done in the seqan:Class.ModifiedIterator, whereas the seqan:Class.ModifiedString only overloads the seqan:Function.begin and seqan:Function.end.
Normally, you are going to use the seqan:Class.ModifiedString and maybe the result of its seqan:Metafunction.Iterator meta-function instead of a seqan:Class.ModifiedIterator directly.

== Nested Modifiers ==

As modifiers implement a certain concept and depend on classes of this concept, they can be chained to create a new modifier. We have seen how the seqan:Class.ModifiedString specialized with seqan:Spec.ModReverse and seqan:Spec.ModView can be used. Now we want to combine them to create a modifier for the reverse complement of a seqan:Spec.Dna string.
We begin with the original string:

{{{
#!cpp
String<Dna> myString = "attacgg";
}}}

Then we define the modifier that complements a seqan:Spec.Dna string:
{{{
#!cpp
typedef ModifiedString<String<Dna>, ModComplementDna>   TMyComplement;
}}}

This modifier now should be reversed from left to right:
{{{
#!cpp
typedef ModifiedString<TMyComplement, ModReverse>       TMyReverseComplement;
}}}

The original string can be given via seqan:Function.setValue or to the constructor.
{{{
#!cpp
TMyReverseComplement myReverseComplement(myString);
}}}

The result is:
{{{
#!cpp
::std::cout << myString << ::std::endl;
::std::cout << myReverseComplement << ::std::endl;

infix(myString, 1, 1) = "cgt";

::std::cout << myString << ::std::endl;
::std::cout << myReverseComplement << ::std::endl;
}}}
{{{
#!html
<pre class="wiki" style="background-color:black;color:lightgray">
ATTACGG
CCGTAAT
ACGTTTACGG
CCGTAAACGT
</pre>
}}}

Using a predefined shortcut, the whole example could be reduced to:
{{{
#!cpp
String<Dna> myString = "attacgg";
::std::cout << myString << ::std::endl;
::std::cout << DnaStringReverseComplement(myString) << ::std::endl;
}}}

[seqan:"Demo.Nested Modifiers" Click here] to see the complete source code of the nested modifiers example.

=== Submit a  comment ===
If you found a mistake, or have suggestions about an improvement of this page press:
[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Modifiers&type=enhancement submit your comment]
