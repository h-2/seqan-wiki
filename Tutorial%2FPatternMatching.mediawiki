
== Pattern Matching ==

[[TOC]]

 Learning Objective :: In this tutorial you will learn how to use the SeqAn classes finder and pattern to search a known pattern in a string or [dox:StringSet StringSet]. 
 Difficulty :: Average
 Duration :: 40 min
 Prerequisites :: [[Tutorial/Indices]]


Pattern matching is about searching a known string or [dox:StringSet StringSet] (<tt>needle</tt>) in another string or [dox:StringSet StringSet] (<tt>haystack</tt>).
This tutorial will introduce you into the SeqAn classes finder and pattern. It will demonstrate how to use the spezializations of the class finder to perform either an online search or an index based seach.
And you will learn how to specify the search algorithm, which can be exact or approximate.

=== Overview ===

In the case of approximate searching errors are allowed, which are either only mismatches or also indels.
Additionally there are filtration algorithms which return potential matches, i.e. <tt>haystack</tt> segments possibly containing a pattern match.
All searching is done by calling the function [dox:Finder#find find], which takes at least two arguments:
#A [dox:Finder Finder] that stores all necessary information about the <tt>haystack</tt> and the last found position of the <tt>needle</tt> within the haystack.
 2. A [dox:Pattern Pattern] that stores all information about the <tt>needle</tt>.
Some variants of [dox:Finder#find find] support further arguments.
The [dox:Finder Finder] and [dox:Pattern Pattern] classes expect the underlying <tt>haystack</tt> and <tt>needle</tt> types as first template arguments.
In addition, a second template argument specifies the search algorithm.

Each call of [dox:Finder#find find] finds only one match (or potential match) of the <tt>needle</tt> within the haystack. 
The [dox:Finder Finder] can be asked for the begin and end position of the last found match.
The [dox:Pattern Pattern] can be asked for the number of the found sequence if the <tt>needle</tt> is a [dox:StringSet StringSet].
Subsequent calls of find can be used to find more occurrences of the <tt>needle</tt>, until no more occurrences can be found and find returns <tt>false</tt>.

In general, search algorithms can be divided into algorithms that preprocess the <tt>needle</tt> (online search) or preprocess the <tt>haystack</tt> (index search).

=== Online Search ===
For all online search algorithms, the [dox:Finder Finder] is an iterator that scans over the <tt>haystack</tt>.
The [dox:Pattern Pattern] is a search algorithm dependent data structure preprocessed from the <tt>needle</tt>.
The second template argument of the [dox:Pattern Pattern] selects the search algorithm.

==== Exact Search ====
The following code snippet illustrates the usage of online search algorithms in SeqAn using the example of the Hoorspool ([[Bibliography#Horspool1980| Horspool, 1980]]) algorithm.
We begin by creating two strings of type <tt>char</tt> containing the <tt>haystack</tt> and the <tt>needle</tt>.
[[Include(source:trunk/core/demos/tutorial/find/find_exact.cpp, fragment=initialization)]]
We then create [dox:Finder Finder] and [dox:Pattern Pattern] objects of these strings and choose [dox:HorspoolPattern Horspool] as the specialization in the second template argument of [dox:Pattern Pattern].
[[Include(source:trunk/core/demos/tutorial/find/find_exact.cpp, fragment=output)]]

Program output:
<pre>
#html
<pre class="wiki" style="background-color:black;color:lightgray">
[2,4)   mo
[12,14) mo
[17,19) mo
</pre>
</pre>

Currently the following exact online algorithms for searching a single sequence are implemented in Seqan:

{| border=1 class="simple"
! '''Specialization''' 
! '''Description''' 
|- 
|  [dox:SimplePatter Simple" 
|  Brute force algorithm 
|- 
|  [dox:HorspoolPattern Horspool] 
|  Horspool's algorithm ([[Bibliography#Horspool1980| Horspool, 1980]]) 
|- 
|  [dox:BfamPattern Bfam] 
|  Backward Factor Automaton Matching 
|- 
|  [dox:BndmAlgoPattern BndmAlgo] 
|  Backward Nondeterministic DAWG Matching 
|- 
|  [dox:ShiftAndPattern ShiftAnd] 
|  Exact string matching using bit parallelism 
|- 
|  [dox:ShiftOrPattern ShiftOr] 
|  Exact string matching using bit parallelism 
|}


... and for multiple sequences:

{| border=1 class="simple"
! '''Specialization''' 
! '''Description''' 
|- 
|  [dox:WuManberPattern WuManber] 
|  Extension of [dox:HorspoolPattern Horspool] 
|- 
|  [dox:MultiBfamPattern MultiBfam] 
|  Multiple version of [dox:BfamPattern Bfam], uses an automaton of reversed needles 
|- 
|  [dox:SetHorspoolPattern SetHorspool] 
|  Another extension of [dox:HorspoolPattern Horspool] using a trie of reversed needles 
|- 
|  [dox:AhoCorasickPattern AhoCorasick] 
|  Uses a trie with suffix links to scan through the haystack ([[Bibliography#AhoCorasick1975| Aho, Corasick, 1975]]) 
|- 
|  [dox:MultipleShiftAndPattern MultiShiftAnd] 
|  Extension of [dox:ShiftAndPattern ShiftAnd], should only be used if the sum of needle lengths doesn't exceed the machine word size 
|}


<pre>#AssignmentBox
=== Assignment 1
 Type ::
  Review
 Objective :: 
  Use the given code example from below. Extend the code to search the given <tt>haystack</tt> simultaneously for "mo", "send" and "more". For every match output the begin and end position in the <tt>haystack</tt> and which <tt>needle</tt> has been found.
 Hint :: 
  Online search algorithms for multiple sequences simply expect needles of type <tt>String<String<...> ></tt>.
[[Include(source:trunk/core/demos/tutorial/find/find_assignment1.cpp)]]
 Hint :: You can use the specialization [dox:WuManberPattern WuManber].
 Solution :: 
  Click ''more...'' to see the solution.
<pre>#FoldOut
----
[[Include(source:trunk/core/demos/tutorial/find/find_assignment1_solution.cpp)]]
We use a [dox:Pattern Pattern] specialized with the [dox:WuManberPattern WuManber] algorithm for the search and initialize it with our <tt>needles</tt> string.
For every match found by [dox:Finder#find find] we output the begin and end position and the match region in the <tt>haystack</tt>
as well as the index of the found <tt>needle</tt> which is returned by <tt>position(pattern)</tt>.

Program output:
<pre>#ShellBox
[2,4)	0	mo
[7,11)	1	send
[12,14)	0	mo
[12,16)	2	more
[17,19)	0	mo
</pre>
</pre>
</pre>


==== Approximate Search ====

The approximate search can be used to find segments in the <tt>haystack</tt> that are similar to a <tt>needle</tt> allowing errors, such as mismatches or indels. 
Note that if only mismatches are allowed, the difference of the end and begin position of a match is the length of the found <tt>needle</tt>. 
However, in the case of indels this difference may vary and is only a rough estimate for the length.
Therefore, to find a begin position for a certain end position the [dox:Finder#findBegin findBegin] interface should be used.
The usage is similar to [dox:Finder#find find] and is shown in the next example.
We want to find all semi-global alignments of a <tt>needle</tt> "more" with a [dox:SimpleScore SimpleScore] of at least -2 using the scoring scheme (0,-2,-1) (match,mismatch,gap).

Again, we create <tt>haystack</tt> and <tt>needle</tt> strings first:
[[Include(source:trunk/core/demos/tutorial/find/find_approx.cpp, fragment=initialization)]]

We then create [dox:Finder Finder] and [dox:Pattern Pattern] objects of these strings and choose [dox:DPSearchPattern DPSearch] as the specialization in the second template argument of [dox:Pattern Pattern].
[dox:DPSearchPattern DPSearch] expects the scoring function as the first template argument which is [dox:SimpleScore SimpleScore] in our example.
The pattern is constructed using the <tt>needle</tt> as a template and our scoring object is initialized with the appropriate scores for match, mismatch and gap.
As in the previous example, the main iteration uses [dox:Finder#find find] to iterate over all end positions with a minimum best score of -2.
If such a semi-global alignment end position is found the begin position is searched via [dox:Finder#findBegin findBegin].
Please note that we have to set the minimum score to the score of the match found ([dox:LocalAlignmentEnumerator#getScore getScore]) in order to find the begin of a best match.
We then output all begin and end positions and the corresponding <tt>haystack</tt> segment for each match found. 
[[Include(source:trunk/core/demos/tutorial/find/find_approx.cpp, fragment=output)]]

Program output:
<pre>
#html
<pre class="wiki" style="background-color:black;color:lightgray">
[2,4)   mo
[12,14) mo
[12,15) mor
[12,16) more
[12,17) more 
[12,18) more m
[17,19) mo
[17,21) mone
</pre>
</pre>

{| border=1 class="simple"
! '''Specialization''' 
! '''Description''' 
|- 
|  [dox:DPSearchPattern DPSearch] 
|  Dynamic programming algorithm for many kinds of scoring scheme 
|- 
|  [dox:MyersPattern Myers] 
|  A fast bit-parallel DP algorithm for edit distance ([[Bibliography#Myers1999| Myers 1999]], [[Bibliography#Ukkonen1985| Ukkonen 1985]]) 
|- 
|  [dox:PexPattern Pex] 
|  A (hierarchical) filter based on the pigeonhole principle ([[Bibliography#Baeza-YatesNavarro1999| Baeza-Yates, Navarro, 1999]]) 
|- 
|  [dox:AbndmAlgoPattern AbndmAlgo] 
|  Approximate Backward Nondeterministic DAWG Matching, adaption of [dox:AbndmAlgoPattern AbndmAlgo]  
|}


<pre>#AssignmentBox
=== Assignment 2
 Type ::
  Application
 Objective :: 
 Use the example from above. Modify the code to search with the [dox:MyersPattern Myers] algorithm for matches of "more" with an edit distance of at most 2.
 Solution :: 
  Click ''more...'' to see the solution.
<pre>#FoldOut
----
[[Include(source:trunk/core/demos/tutorial/find/find_assignment2_solution.cpp)]]
We again set the <tt>needle</tt> to "more".
We then change the specialization tag of the [dox:Pattern Pattern] to [dox:MyersPattern Myers] with default arguments.
As [dox:MyersPattern Myers] algorithm is only applicable to edit distance searches it cannot be specialized or initialized with a scoring scheme.
In SeqAn, edit distance corresponds to the scoring scheme (0,-1,-1) (match, mismatch, gap) and an edit distance of 2 corresponds to a minimum score of -2 given to the [dox:Finder#find find] function.

Program output:
<pre>#ShellBox
[2,4)	mo
[2,5)	mon
[2,6)	mon,
[12,14)	mo
[12,15)	mor
[12,16)	more
[12,17)	more 
[12,18)	more m
[17,19)	mo
[17,20)	mon
[17,21)	mone
[17,22)	money
</pre>
</pre>
</pre>


=== Index Search ===
==== Exact Search ====
For the index based search the [dox:Finder Finder] needs to be specialized with an [dox:Index Index] of the <tt>haystack</tt> in the first template argument.
The index itself requires two template arguments, the <tt>haystack</tt> type and a index specialization.
In contrast, since the <tt>needle</tt> is not preprocessed the second template argument of the [dox:Pattern Pattern] has to be omitted.
The following source illustrates the usage of an index based search in SeqAn using the example of the [dox:IndexEsa IndexEsa] index (an enhanced suffix array index), the default index specialization if no second template argument for the index is given.
We begin to create an index object of our <tt>haystack</tt> "tobeornottobe" and a <tt>needle</tt> "be".
[[Include(source:trunk/core/demos/tutorial/find/find_index.cpp, fragment=initialization)]]
We proceed to create a [dox:Pattern Pattern] of the needle and conduct the search in the usual way:
[[Include(source:trunk/core/demos/tutorial/find/find_index.cpp, fragment=output)]]
Instead of creating and using a pattern solely storing the <tt>needle</tt> we can pass the needle directly to [dox:Finder#find find].
Please note that an [dox:Index Index] based [dox:Finder Finder] has to be reset with [dox:Finder#clear clear] before conducting another search.
[[Include(source:trunk/core/demos/tutorial/find/find_index.cpp, fragment=output_short)]]

Program output:
<pre>
#html
<pre class="wiki" style="background-color:black;color:lightgray">
[11,13)	be
[2,4)	be
[11,13)	be
[2,4)	be
</pre>
</pre>

All indices also support [dox:StringSet StringSet] texts and can therefore be used to search multiple <tt>haystacks</tt> as the following example shows.
We simply exchange the [dox:CharString CharString] of the haystack with a [dox:StringSet StringSet] of [dox:CharString CharString] and append some strings to it.
[[Include(source:trunk/core/demos/tutorial/find/find_index_multiple.cpp, fragment=initialization)]]
The rest of the program remains unchanged.
[[Include(source:trunk/core/demos/tutorial/find/find_index_multiple.cpp, fragment=output)]]

Program output:
<pre>
#html
<pre class="wiki" style="background-color:black;color:lightgray">
[< 0 , 11 >,< 0 , 13 >)	be
[< 1 , 3 >,< 1 , 5 >)	be
[< 2 , 0 >,< 2 , 2 >)	be
[< 0 , 2 >,< 0 , 4 >)	be
</pre>
</pre>

The following index specializations support the [dox:Finder Finder] interface as described above.
{| border=1 class="simple"
! '''Specialization''' 
! '''Description''' 
|- 
|  [dox:IndexEsa IndexEsa] 
|  Enhanced suffix array based index. Supports arbitrary needles. 
|- 
|  [dox:IndexQGram IndexQGram] 
|  q-gram index. Needle mustn't exceed the size of the q-gram. 
|- 
|  [dox:OpenAddressingQGramIndex Open Adressing QGram Index] 
|  q-gram index with open addressing. Supports larger q-grams. Needle and q-gram must have the same size. 
|}


Besides the [dox:Finder#find find] interface there is another interface for indices using suffix tree iterators to search exact <tt>needle</tt> occurrences described in the [[Tutorial/Indices#Example1| index tutorial]].

<pre>#AssignmentBox
=== Assignment 3
 Type ::
  Application
 Objective :: 
 Modify the example above to search with a [dox:OpenAddressingQGramIndex Open Adressing QGram Index] q-gram index for matches of "tobe" in "tobeornottobe".
 Solution :: 
  Click ''more...'' to see the solution.
<pre>#FoldOut
----
[[Include(source:trunk/core/demos/tutorial/find/find_assignment3_solution.cpp)]]
We simply add a second template argument to the definition of the [dox:Index Index] as described in the documentation of the [dox:OpenAddressingQGramIndex Open Adressing QGram Index].
As shape we can use an [dox:UngappedShape UngappedShape] of length 4.

Program output:
<pre>#ShellBox
[0,4)	tobe
[9,13)	tobe
</pre>
</pre>
</pre>


==== Approximate Filtration ====
Currently there are no indices directly supporting an approximate search.
But nevertheless, there are approximate search filters available that can be used to filter out regions of the <tt>haystack</tt> that do not contain an approximate match, see [dox:SwiftFinder SwiftFinder] and [dox:SwiftPattern].
The regions found by these filters potentially contain a match and must be verified afterwards.
[dox:Finder#beginPosition beginPosition], [dox:Finder#endPosition endPosition] and [dox:Finder#infix infix] can be used to return the boundaries or sequence of such a potential match.
For more details on using filters, see the [[HowTo/FilterSimilarSequences| SWIFT howto]].

=== Submit a  comment ===
If you found a mistake, or have suggestions about an improvement of this page press:
[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/PatternMatching&type=enhancement submit your comment]



{{TracNotice|{{PAGENAME}}}}