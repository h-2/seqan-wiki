This page describes the general structure of application packages in SeqAn.

The package should contain 2 folders, ```example``` and ```bin```, as well as two files, namely ```LICENSE``` and ```README```.           

== README

The README file should be structured as described below. First we present general requirements and secondly we show an example.

Since the README file should easily be readable on the console and not depend on fancy formatting we set the following rules:

 * Each line should consist of no more than 78 characters. Exceptions are links.
 * In between two sentences there should be 2 spaces. Dots of data structures can easily be identified this way and it seems to be convention.
 * Each caption should be flanked by a newline and line, such that the order is:
{{{
------------------------------------------------------------------------------
Caption
------------------------------------------------------------------------------ 
}}}
 * There should be a newline after a line and after each paragraph.
 * A command line call should start with a ```$```.

=== Header Section

The header contains the name of the application, a sub-header, as well as the link to the corresponding web site, the Version number and the date, in that order. Note that the rows should be centred.

==== Example

{{{
                        STELLAR
                        the SwifT Exact LocaL AligneR

                  http://www.seqan.de/projects/stellar.html
                                 Version 1.3
                                 April, 2012
}}}

=== Table of Contents Section

This section describes the table of content wish should be equal for all applications. Therefore, you can copy the example as it is.

==== Example

{{{
------------------------------------------------------------------------------
Table of Contents
------------------------------------------------------------------------------

  1. Overview
  2. Examples
  3. Reference and Contact
  4. File Formats
}}}

=== Overview Section

The overview section describes '''what''' the application does and how.

==== Example

{{{
------------------------------------------------------------------------------
1. Overview
------------------------------------------------------------------------------

STELLAR is a tool for finding pairwise local alignments between long genomic
or very many short sequences.  It identifies all local alignments with a
maximal error rate and a minimal length, whereby errors can be mismatches,
insertions or deletions (edit operations).

STELLAR applies the SWIFT filter algorithm to identify parallelograms of the
alignment matrix that overlap with a potential local alignment. These
parallelograms are verified subsequently and the resulting local alignments
written to the output file.
}}}

=== Examples Section

One or two examples (besides showing how to call the help) should demonstrate the usage and briefly describe the output, which can serve as a test for the user.

In addition you should always provide the sentence:

You can find the binary ```application``` in the directory "bin" and the example files in "example".

==== Example

{{{
------------------------------------------------------------------------------
2. Examples
------------------------------------------------------------------------------


You can find the binary stellar in the directory "bin" and the example files in "example".

------------------------------------------------------------------------------
2.1. Help
------------------------------------------------------------------------------

The command:

$ stellar --help

prints the help of stellar.

------------------------------------------------------------------------------
2.2. Two long sequences
------------------------------------------------------------------------------

In the folder /examples/ you can find the files NC_001477.fasta and
NC_001474.fasta  containing the sequences of two virus serotypes.  To compare
the two sequences do the following:

  $ stellar example/NC_001477.fasta example/NC_001474.fasta
  $ less stellar.gff

On success, STELLAR dumped one local alignment into the file stellar.gff:

gi|9626685|ref|NC_001477.1|     Stellar eps-matches     10621   10735   95.6897 +       .       gi|158976983|ref|NC_001474.2|;seq2Range=10609,10723;cigar=51M1I1M1D62M;mutations=6T,29A,52C,81A

You may want to run STELLAR again with less stringent parameters to
identify other similar regions, and write the output into a different file:

  $ stellar -o virus_serotypes.gff --epsilon 0.1 --minLength 50 \
      ../apps/stellar/examples/NC_001477.fasta \ 
      ../apps/stellar/examples/NC_001474.fasta
  $ less virus_serotypes.gff

Now, you should obtain 13 local alignments in the file virus_serotypes.gff.

------------------------------------------------------------------------------
2.3. Many-to-reference
------------------------------------------------------------------------------

To demonstrate how to compare many (short) sequences to a database sequence we
provide a file containing 10 example reads with errors, some of them spanning
simulated breakage points.  For comparison we set the minimal length of a match
to only 30 what allows splitting a read into up to 3 fragments:

  $ stellar -o mapped_reads.gff --minLength 30 \
      ../apps/stellar/examples/NC_001477.fasta \
      ../apps/stellar/examples/reads.fasta
  $ less mapped_reads.gff

The output file will contain 15 matches, 6 entirely mapped reads, 3 reads
split into 2 fragments each, and one read split into 3 matches at different
genome locations.
}}}

=== Reference and Contact Section

This sections shows how to cite the application and offers a contact email for questions and comments.

==== Example

{{{
------------------------------------------------------------------------------
3. Reference and Contact
------------------------------------------------------------------------------

HOW TO CITE AND CONTACT EMAIL.

Please cite:

  Birte Kehr, David Weese, Knut Reinert STELLAR: fast and exact local
  alignments BMC Bioinformatics, 12(Suppl 9):S15, 2011

For questions or comments contact:

  Birte Kehr <birte.kehr@fu-berlin.de>
}}}

=== File Formats Section

This section should describe the requirements on the input files as well as the (different) output files.

The input files should be described before the output options are shown.

==== Example

{{{
------------------------------------------------------------------------------
4. File Formats
------------------------------------------------------------------------------

General stuff if necessary.

------------------------------------------------------------------------------
4.1 Input Formats
------------------------------------------------------------------------------

Input to STELLAR are two files, each containing one or more sequences in FASTA
format. Each sequence from file 1 will be compared to each sequence in file 2.
The sequences from file 1 are used as database, the sequences from file 2 as
queries.

------------------------------------------------------------------------------
4.2 Output Formats
------------------------------------------------------------------------------

STELLAR supports currently two output format selectable via the "--outFormat
STRING" option. The following values for STRING are possible:

 * gff: General Feature Format (GFF)
 * txt: Human Readable Alignment Format

The following subsections describe the structure of these formats.
 
------------------------------------------------------------------------------
4.2.1. General Feature Format (GFF)
------------------------------------------------------------------------------

The General Feature Format is specified by the Sanger Institute as a tab-
delimited text format with the following columns:

<seqname> <src> <feat> <start> <end> <score> <strand> <frame> [attr] [cmts]

See also: http://www.sanger.ac.uk/resources/software/gff/spec.html
Consistent with this specification stellar GFF output looks as follows:

DNAME stellar eps-matches DBEGIN DEND PERCID DSTRAND . ATTRIBUTES

Match value description:

  DNAME        Name of the database sequence
  stellar      Constant
  eps-matches  Constant
  DBEGIN       Beginning position in the database sequence 
               (positions are counted from 1)
  DEND         End position in the database sequence (included)
  PERCID       Percent identity (100 - 100 * error rate)
  DSTRAND      '+'=forward strand of database or '-'=reverse strand
  .            Constant
  ATTRIBUTES   A list of attributes in the format <tag_name>=<tag>
               separated by ';'

Attributes are: 

  ID=          Name of the query sequence
  seq2Range=   Begin and end position of the alignment in the query
               sequence (counting from 1)
  cigar=       Alignment description in cigar format
  mutations=   Positions and bases that differ from the database sequence
               with respect to the query sequence (counting from 1)

For matches on the reverse strand, DBEGIN and DEND are positions on the
related forward strand. It holds DBEGIN < DEND, regardless of DSTRAND.

------------------------------------------------------------------------------
4.2.2 Human Readable Alignment Format
------------------------------------------------------------------------------

This format is meant to be readable by humans.  The first line contains the
name of the database sequence followed by a line containing the start and end
position of the match in this sequence.

The next two lines contain the name of the query sequence and the start and
end positions in the query sequence.

Positions are counted from 0, end positions are exclusive, i.e. the first 
position behind the last position of the match.

The alignment is displayed in rows, one row for the database sequence and
one for the query sequence, both containing gap characters. Inbetween there
is a row containing '|' and spaces, where '|' indicates a match. Lines are
wrapped after 50 alignment columns. To assist for counting positions, there
is a '.' above each line every 5 positions and a ':' every ten positions.
}}}