'''Note: this page documents the 1.4 version of SeqAn, see [wiki:Tutorial] if you need the documentation for the trunk version.'''
= Simple RNA-Seq Tutorial =

[[TOC]]

 Learning Objective ::
  You will learn how to write a simple gene quantification tool based on RNA-Seq data.
 Difficulty ::
  Hard
 Duration ::
  2h
 Prerequisites ::
  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.

RNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.
Knowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.

In the following tutorial you will develop a simple gene quantification tool.
It will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.

Albeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.

You will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.

== Introduction to the used Data Structures ==

This section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.
You may skip one or both subsections if you are already familiar with one or both data structures.

=== Fragment Store ===

The seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.
These tasks typically require lots of data structures that are related to each other like:
   * reads, mate-pairs, reference genome
   * pairwise alignments
   * genome annotation 

The Fragment Store subsumes all these data structures in an easy to use interface.
It represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.
Additionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.
The Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.

The Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.
The rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.
The only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.
Many stores have an associated name store to store element names.
Each name store is a seqan:Class.StringSet that stores the element name at the position of its id.
All stores are present in the Fragment Store and empty if unused.
The concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.

=== Annotation Tree ===

Annotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. 
A typical annotation tree looks as follows:

|| [[Image(source:tags/seqan-1.4.0/docs2/images/AnnotationTree.png, 400px)]] ||
|| Annotation tree example ||

In the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.
Instead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.

=== Interval Tree ===

The seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].
A range query is an operation that returns all tree intervals that overlap a given query point or interval.

The interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.
Interval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.
To construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.
The functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).

== Import Alignments and Gene Annotations from File ==

At first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.
An empty `FragmentStore` can simply be created with:
{{{#!cpp
FragmentStore<> store;
}}}
Files can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.
The contents of different files can be loaded with subsequent calls of `read`.
As we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. 

In your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.

=== Assignment 1 ===
{{{#!AssignmentBox

 Type :: Application
 Objective :: Use the code template in [source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. 
{{{
#!FoldOut
----
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]
}}}
 Hint ::
{{{
#!FoldOut
----
Open STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.
}}}
 Hint ::
{{{
#!FoldOut
----
[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).
Use [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.
The function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.
}}}
 Solution ::
{{{
#!FoldOut
----
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]
}}}
}}}

== Extract Gene Intervals ==

Now that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.
In the annotation tree, genes are (the only) children of the root node.
To efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.
To construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.
See the [source:tags/seqan-1.4.0/core/demos/interval_tree.cpp interval tree demo] for more details.
As cargo we use the gene's annotation id to later retrieve all gene specific information.
The strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.
For the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.

To define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.
All annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.
The value type of the annotation store is the class seqan:Class.AnnotationStoreElement.
Its member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:
{{{#!cpp
typedef FragmentStore<> TStore;
typedef Value<TStore::TAnnotationStore>::Type TAnnotation;
typedef TAnnotation::TId TId;
typedef TAnnotation::TId TPos;
typedef IntervalAndCargo<TPos, TId> TInterval;
}}}
The string of strings of intervals can now be defined as:
{{{#!cpp
String<String<TInterval> > intervals;
}}}

In your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.
For each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.

=== Assignment 2 ===
{{{#!AssignmentBox

 Type :: Application
 Objective :: Use the code template in [source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.
{{{
#!FoldOut
----
Extend the definitions:
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]
Add a function:
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]
Extend the `main` function:
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]
and
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]
}}}
 Hint ::
{{{
#!FoldOut
----
You can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:"Function.AnnotationTree Iterator#goDown" go down] to the first gene and [seqan:"Function.AnnotationTree Iterator#goRight" go right] to visit all other genes.
Use seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.
}}}
 Hint ::
{{{
#!FoldOut
----
Make sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.
Remember to ensure that `intervals` is of appropriate size, e.g. with
{{{#!cpp
resize(intervals, length(store.contigStore));
}}}
Use seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.
}}}
 Solution ::
{{{
#!FoldOut
----
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]
}}}
}}}



== Construct Interval Trees ==

With the strings of gene intervals - one for each contig - we now can construct interval trees.
Therefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.
As we need an interval tree for each contig, we instantiate a string of interval trees:
{{{#!cpp
typedef IntervalTree<TPos, TId> TIntervalTree;
String<TIntervalTree> intervalTrees;
}}}

Your third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.

=== Assignment 3 ===
{{{#!AssignmentBox

 Type :: Application
 Objective :: Use the code template in [source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.
{{{
#!FoldOut
----
Extend the definitions:
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]
Add a function:
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]
Extend the {{{main}}} function:
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]
and
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]
}}}
 Hint ::
{{{
#!FoldOut
----
First, resize the string of interval trees accordingly:
{{{#!cpp
resize(intervalTrees, length(intervals));
}}}
}}}
 Hint ::
{{{
#!FoldOut
----
Use the function seqan:Function.createIntervalTree.
'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.
}}}
 Solution ::
{{{
#!FoldOut
----
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]
}}}
}}}

== Compute Gene Coverage ==

To determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.
Therefore we use a string of counters addressed by the annotation id.
{{{#!cpp
String<unsigned> readsPerGene;
}}}
For each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.
To address the counter of a gene, we use its annotation id stored as cargo in the interval tree.

Read alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.
Their actual type can simply be determined as follows:
{{{#!cpp
typedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;
}}}
Given the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.

Your fourth assignment is to implement the count function that performs all the above described steps.
Optionally, use OpenMP to parallelize the counting.

=== Assignment 4 ===
{{{#!AssignmentBox

 Type :: Application
 Objective :: Use the code template in [source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.
{{{
#!FoldOut
----
Extend the definitions:
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]
Add a function:
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]
Extend the {{{main}}} function:
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]
and
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]
}}}
 Hint ::
{{{
#!FoldOut
----
First, resize and zero the string of counters accordingly:
{{{#!cpp
resize(readsPerGene, length(store.annotationStore), 0);
}}}
Make sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.
}}}
 Hint ::
{{{
#!FoldOut
----
The result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:
{{{#!cpp
String<TId> result;
}}}
Reuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).

{{{#!comment 
The length of the read of the i-th read alignment is:
{{{#!cpp
length(store.readSeqStore[store.alignedReadStore[i].readId])
}}}
}}}
}}}
 Solution ::
{{{
#!FoldOut
----
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]
}}}
}}}


== Output RPKM Values ==

In the final step, we want to output the gene expression levels in a normalized measure.
We therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).
One advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).

The exon length of an mRNA is the sum of lengths of all its exons.
As a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.

Your final assignment is to output the RPKM value for genes with a read counter >0.
To compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).
For the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.
Output the gene names and their RPKM values separated by tabs as follows:
{{{
#!ShellBox
#gene name	        RPKM value
ENSMUSG00000053211	5932.12
ENSMUSG00000069053	10540.1
ENSMUSG00000056673	12271.3
ENSMUSG00000069049	10742.2
ENSMUSG00000091749	7287.66
ENSMUSG00000068457	37162.8
ENSMUSG00000069045	13675
ENSMUSG00000069044	6380.36
ENSMUSG00000077793	2088.62
ENSMUSG00000000103	7704.74
ENSMUSG00000091571	10965.2
ENSMUSG00000069036	127128
ENSMUSG00000090405	10965.2
ENSMUSG00000090652	35271.2
ENSMUSG00000052831	68211.2
ENSMUSG00000069031	37564.2
ENSMUSG00000071960	34984
ENSMUSG00000091987	37056.3
ENSMUSG00000090600	2310.18
}}}

Download and decompress the attached mouse annotation ([raw-attachment:Mus_musculus.NCBIM37.61.gtf.zip Mus_musculus.NCBIM37.61.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([raw-attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).
Test your program and compare your output with the output above.

=== Assignment 5 ===
{{{#!AssignmentBox

 Type :: Application
 Objective :: Use the code template in [source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.
{{{
#!FoldOut
----
Add a function:
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]
Extend the {{{main}}} function:
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]
}}}
 Hint ::
{{{
#!FoldOut
----
To compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.
}}}
 Hint ::
{{{
#!FoldOut
----
Remember that exons are not the only children of mRNA. 
}}}
 Solution ::
{{{
#!FoldOut
----
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]
}}}
}}}

== References ==
   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.

== Next Steps ==

 * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole
 * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.
 * Continue with the [wiki:Tutorial rest of the tutorials].

== Submit a  Comment ==
If you found a mistake, or have suggestions about an improvement of this page press:
[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]