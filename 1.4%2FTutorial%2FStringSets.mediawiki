'''Note: this page documents the 1.4 version of SeqAn, see [wiki:Tutorial] if you need the documentation for the trunk version.'''
= StringSets

[[TOC()]]

 Learning Objective :: You will learn the advantages of StringSets and how to work with them.
 Difficulty :: Basic
 Duration :: 15 min
 Prerequisites :: [wiki:Tutorial/Sequences]


A set of sequences can either be stored in a sequence of sequences, for example in a {{{String<String<char> >}}}, or in a seqan:Class.StringSet. 
This tutorial will introduce you to the SeqAn class seqan:Class.StringSet, its background and how to use it. 

== Background

One advantage of using seqan:Class.StringSet is that it supports the function seqan:Function.concat that returns a ''concatenator'' of all sequences in the string set.
A ''concatenator'' is an object that represents the concatenation of a set of strings.
This way, it is possible to build up index data structures for multiple sequences by using the same construction methods as for single sequences.

There are two kinds of seqan:Class.StringSet specializations in !SeqAn:
seqan:Spec.Owner, the default specialisation, and seqan:Spec.Dependent; see the table below for details.
seqan:Spec.Owner string sets actually store the sequences, whereas seqan:Spec.Dependent string set just refer to sequences that are stored outside of the string set.

{{{#!cpp
StringSet<DnaString>               ownerSet;
StringSet<DnaString, Owner<> >     ownerSet2;      // same as above
StringSet<DnaString, Dependent<> > dependentSet;
}}}

The specialization [seqan:Spec.ConcatDirect Owner<ConcatDirect>] already stores the sequences in a concatenation.
The concatenators for all other specializations of seqan:Class.StringSet are '''virtual''' sequences, that means their interface '''simulates''' a concatenation of the sequences, but they do not literally concatenate the sequences into a single sequence. 
Hence, the sequences do not need to be copied when a concatenator is created.  

One string can be an element of several seqan:Spec.Dependent string sets.
Typical tasks are, e.g., to find a specific string in a string set, or to test whether the strings in two string sets are the same.
Therefore a mechanism to identify the strings in the string set is needed, and, for performance reasons, this identification should not involve string comparisons.
!SeqAn solves this problem by introducing ''ids'', which are by default {{{unsigned int}}} values.

The following table lists the different seqan:Class.StringSet specializations:

||= Specialization =||= Description =||
|| {{{Owner}}} || The default specialization of seqan:Class.StringSet.  The sequences in this string set are stored in a string of string data structure.  seqan:Function.concat returns a special ''concatenator'' object that simulates the concatenation of all these strings. ||
|| {{{Owner<ConcatDirect>}}} || The sequences are stored as parts of a long string.  Since the sequences are already concatenated, seqan:Function.concat just needs to return this string.  The string set also stores lengths and starting positions of the strings.  Inserting new strings into the set or removing strings from the set is more expensive than for the default seqan:Spec.Owner specialization, since this involves moving all subsequent sequences in memory. ||
|| {{{Dependent<Tight>}}} || This specialization stores sequence pointers consecutively in an array.  Another array stores an id value for each sequence.  That means that accessing given an id needs a search through the id array. ||
|| {{{Dependent<Generous>}}} || The sequence pointers are stored in an array at the position of their ids.  If a specific id is not present, the array stores a zero at this position.  The advantage of this specialization is that accessing the sequence given its id is very fast.  On the other hand, accessing a sequence given its position {{{i}}} can be expensive, since this means we have to find the ''i''-th non-zero value in the array of sequence pointers.  The space requirements of a string set object depends on the largest id rather than the number of sequences stored in the set.  This could be inefficient for string sets that store a small subset out of a large number of sequences. ||


== Building String Sets

Use the function seqan:Function.appendValue to append strings to string sets:

{{{
#!cpp
StringSet<DnaString> stringSet;
DnaString str0 = "TATA";
DnaString str1 = "CGCG";
appendValue(stringSet, str0);
appendValue(stringSet, str1);
}}}

== Functionality

This section will give you a short overview of the functionality of the class seqan:Class.StringSet. 

There are two ways for accessing the sequences in a string set: 
(1) the function seqan:Function.value returns a reference to the sequence at a specific ''position'' within the sequence of sequences, and (2) seqan:Function.valueById accesses a sequence given its ''id''. We can retrieve the ''id'' of a sequence in a seqan:Class.StringSet with the function seqan:Function.positionToId. 

{{{#!cpp
// (1) Access by position
std::cout << "Owner: " << std::endl;
std::cout << "Position 0: " << value(stringSet, 0) << std::endl;

// Get the corresponding ids
unsigned id0 = positionToId(stringSet, 0);
unsigned id1 = positionToId(stringSet, 1);
// (2) Access by id
std::cout << "Id 0:  " << valueById(stringSet, id0) << std::endl;
}}}

{{{#!ShellBox
Owner: 
Position 0: TATA
Id       0: TATA
}}}

In the case of seqan:Spec.Owner string sets, id and position of a string are always the same, but for seqan:Spec.Dependent string sets, the ids can differ from the positions.
For example, if a seqan:Spec.Dependent string set is used to represent subsets of strings that are stored in seqan:Spec.Owner string sets, one can use the position of the string within the seqan:Spec.Owner string set as id of the strings.
With the function seqan:Function.assignValueById, we can add the string with a given id from the source string set to the target string set.

{{{#!cpp
// Lets create a string set of type dependent to represent strings, 
// which are stored in the StringSet of type Owner
StringSet<DnaString, Dependent<Tight> > depSet;
// We assign the first two strings of the owner string set to the dependent StringSet, 
// but in a reverse order
assignValueById(depSet, stringSet, id1);
assignValueById(depSet, stringSet, id0);

std::cout << "Dependent: " << std::endl;
// (1) Access by position
std::cout << "Pos 0: " << value(depSet, 0) << std::endl;
// (2) Access by id
std::cout << "Id 0:  " << valueById(depSet, id0) << std::endl;
}}}

{{{#!ShellBox
Dependent: 
Position 0: CGCG
Id       0: TATA
}}}

With the function seqan:Function.positionToId we can show, that in this case the position and the id of a string are different.

{{{#!cpp
std::cout << "Position 0: Id " << positionToId(depSet, 0) << std::endl;
std::cout << "Position 1: Id " << positionToId(depSet, 1) << std::endl;
}}}

{{{#!ShellBox
Position 0: Id 1
Position 1: Id 0
}}}

Also see [wiki:/HowTo/EfficientImportOfMillionsOfSequences HowTo: Efficiently import millions of sequences] for remarks on seqan:Spec.ConcatDirect StringSets.

== Iterating over StringSets ==

As well as for other containers, SeqAn has implemented iterators for [seqan:Class.StringSet StringSets]. The generall usage of iterators is described in [wiki:Tutorial/Iterators].
The following example illustrates, how to iterate over the seqan:Class.StringSet:

{{{
#!cpp
typedef Iterator<StringSet<DnaString> >::Type TStringSetIterator;
for (TStringSetIterator it = begin(stringSet); it != end(stringSet); ++it) {
  std::cout << value(it) << std::endl;
}
}}}

{{{
#!ShellBox
TATA
CGCG
}}}

If we want to iterate over the contained [seqan:Class.String Strings] as well, as if the seqan:Class.StringSet would be one sequence, we can use the function seqan:Function.concat to get the concatenation of all sequences.
Therefore we first use the metafunction seqan:Metafunction.Concatenator to receive the type of the concatenation.
Then we can simply build an iterator for this type and iterate over the concatenation of all strings.  

{{{#!cpp
typedef Concatenator<StringSet<DnaString> >::Type TConcat;
TConcat concatSet = concat(stringSet);
    
Iterator<TConcat>::Type it = begin(concatSet);
Iterator<TConcat>::Type itEnd = end(concatSet);
for (; it != itEnd; goNext(it)){
    std::cout << getValue(it) << " ";
}
std::cout << std::endl;
}}}

{{{#!ShellBox
T A T A C G C G 
}}}

{{{#!AssignmentBox
=== Assignment 1
 Type ::
  Review
 Objective :: 
 Build a string set with default specialization and which contains the strings "AAA", "CCC", "GGG" and "TTT". After that print the length of the string set and use a simple for-loop to print all elements of the strings set.
 Solution :: 
  Click ''more...'' to see the solution.
{{{#!FoldOut
----
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/string_sets/assignment_1_solution.cpp)]]
}}}

=== Assignment 2 ===

 Type ::
  Application
 Objective :: 
  In this task you will test, whether a seqan:Spec.Dependent seqan:Class.StringSet contains a string without comparing the actual sequences. 
  Use the given code frame below and adjust it in the following way:\\ 
 1) Build a string set of type seqan:Spec.Owner to store the given strings. \\
 2) Get the corresponding ids for each position and store them. \\
 3) Build a string set of type seqan:Spec.Dependent and assign the strings of the owner string set from position 0,1 and 3 by their id to it.\\
 4) Write a function {{{isElement}}} which takes a {{{StringSet<Dependent<> >}}} and a {{{Id}}} as arguments and checks whether a string set contains a string with a given id.\\
 5) Check if the string set contains the string of position 3 and 2 and print the result.\\
 
{{{#!cpp
#include <iostream>
#include <seqan/sequence.h>
#include <seqan/file.h>

using namespace seqan;


int main()
{
    // Build strings
    DnaString str0 = "TATA";
    DnaString str1 = "CGCG"; 
    DnaString str2 = "TTAAGGCC"; 
    DnaString str3 = "ATGC"; 
    DnaString str4 = "AGTGTCA"; 

    // Your code

    return 0;
}
}}}
 Hints :: 
  You can use the SeqAn functions seqan:Function.positionToId and seqan:Function.assignValueById. 
 Solution :: 
  Click ''more...'' to see the solution.
{{{
#!FoldOut
----
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/string_sets/assignment_2_solution.cpp)]]
}}}

=== Workshop Assignment 4 ===
 Type ::
  Review
 Objective :: 
   In this assignment, we pick up the example from the workshop assignments from the sequences and iterators tutorials. Take the last solution and change the code to build and use StringSets:[[br]]
1) Build a StringSet of readList. Reuse the Rooted iterator above.\\
2) Iterate over the StringSet and print out the values.

[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/string_sets/assignment_3b_workshop_solution.cpp)]]


 Solution :: 
  Click ''more...'' to see the solution.
{{{
#!FoldOut
----
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/string_sets/assignment_4_workshop_solution.cpp)]]
}}}

}}}


== Submit a  comment ==
If you found a mistake, or have suggestions about an improvement of this page press:
[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]