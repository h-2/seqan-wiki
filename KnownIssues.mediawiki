
== Known Issues ==

This page summarizes the known issues of our SeqAn library and bundled app releases.
Also see wiki:ChangeLog

=== Release 1.4.1 ===

*All points of 1.4 are still present.

=== Release 1.4 ===

*Clang 3.2 and 3.3 cannot compile graph property maps.
   The current trunk version for 3.4 contain a fix.
*The pointer-is-a-copy behaviour of <tt>Segment</tt> and <tt>ModifiedString</tt> leads to that <tt>host(X)</tt> is not a reference any more if the host of <tt>X</tt> is an object of one of the said classes.
   For example, this means updating the begin/end position of the host of the base <tt>Finder</tt> does not work any more and that setting the functor of a <tt>ModView ModifiedString</tt> does not work any more either.
*#1003 Inconsistent behaviour of Segments and iterators:
**<tt>atEnd(it)</tt> exists for generic pointer types <tt>T *</tt>.
    This means that <tt>atEnd(it)</tt> can be called for non-rooted iterators of SeqAn strings and segments since they use pointers as iterators.
    We will resolve this soon after the release by removing <tt>template <typename T> bool atEnd(T * it)</tt> and replacing it by <tt>atEnd(it, c)</tt>, i.e. with the additional container.
**<tt>Infix<Infix<TString>::Type >::Type</tt> is the same as <tt>Infix<TString>::Type</tt> (so-called "shortcutting") which leads to possible problems when using <tt>set{Begin,End}Position()</tt>.
**Since <tt>Pointer<TSegment>::Type</tt> is <tt>TSegment</tt> (such that <tt>TModifiedString(infix(s))</tt> can work), updates to the segment are not reflect in its rooted iterators.
**This also causes inconsistencies with rooted iterators, especially the position iterator.
    If the position iterator iterates over a segment then it has the segment as a copy.
    If the user assumes that it is a pointer then updating the original segment does not update the segment copy inside the iterator.
*#1014 For <tt>String<T, Alloc<> > const</tt>, the <tt>Iterator<></tt> metafunction returns a non-const pointer.
   This has not been discovered for a long time and thus there is a lot of code depending on this behaviour.
   We fixed this in many places in the library and apps but will only fix the metafunction definition after the release.



{{TracNotice|{{PAGENAME}}}}