
'''Note: this page documents the 1.4 version of SeqAn, see [[Tutorial]] if you need the documentation for the trunk version.'''
== Sequence File I/O ==
[[TOC()]]

 Learning Objective ::
  This tutorial will explain how to read and write sequence files in SeqAn using the seqan:Class.RecordReader class and the seqan:Shortcut.MultiSeqFile API.
 Difficulty ::
  Advanced
 Duration ::
  30 min
 Prerequisites ::
  Tutorial [[Tutorial/InputOutputOverview| Input / Output Overview]]

This tutorial explains how to read using the seqan:Class.RecordReader class and the seqan:Shortcut.MultiSeqFile API and how to write sequence files using [seqan:Concept.StreamConcept Streams].
Currently, SeqAn supports reading sequences (and qualities where it applies) in FASTA, FASTQ, EMBL and GenBank format.

This tutorial does not explain how to use the seqan:Class.SequenceStream class.
This class is covered in the [[Tutorial/BasicSequenceIO| Basic Sequence I/O tutorial]].

<pre>#comment
<pre>#WarningBox
'''Caution:'''
This tutorial and the described library contents are currently in '''beta state'''.
They might change in the future.
In this case, notice will be given.

'''TODO'''

*Check Duration
</pre>
</pre>

=== Reading Sequence Files ===

Because sequences play a central role in the SeqAn, the library provides a comprehensive implementation of input routines.
The sequence I/O facilities are available through the <tt>seq_io</tt> module.
You get access to this module by <tt>#include <seqan/seq_io.h></tt>.
We will first describe the API for record-wise reading of sequence files and then go over to reading all records in a file at once.

We start out by creating a seqan:Class.RecordReader object.
For most cases, the single-pass specialization is the most appropriate one.
Then, we can read the file record-by-record using the function seqan:Function.readRecord.

To this function, we pass the buffers we want to read the record identifier and the sequence into (<tt>id</tt> and <tt>seq</tt>).
This is followed by the <tt>reader</tt> object we create with the <tt>std::fstream</tt> previously opened.
The last argument is the tag <tt>seqan::Fasta()</tt> which uses the variant of seqan:Function.readRecord for reading FASTA files.

[[Include(source:/trunk/core/demos/tutorial/sequence_io/example1.cpp)]]

When reading FASTQ files, we use the tag <tt>seqan::Fastq()</tt>.
For storing the qualities, we can pass an optional third parameter of type seqan:Shortcut.CharString which stores the quality values.

[[Include(source:/trunk/core/demos/tutorial/sequence_io/example2.cpp)]]

Optionally, we can also read the sequence into a string of seqan:Spec.Dna5Q characters which will store the qualities directly in the string's characters.

[[Include(source:/trunk/core/demos/tutorial/sequence_io/example3.cpp)]]

<pre>#ImportantBox
'''Information:''' Sequence Parsing Behaviour

*When using seqan:Spec.Dna5 or seqan:Spec.Dna5Q as the sequence's alphabet type, the parsing routine will allow the characters <tt>'C'</tt>, <tt>'G'</tt>, <tt>'A'</tt>, <tt>'T'</tt>, and <tt>'N'</tt> in the sequences of the file.
   This can make problems if the sequenc contains different characters, for example when it contains IUPAC characters.
   In this case, you can simply use seqan:Shortcut.CharString as the <tt>seq</tt> parameter and then assign them to a seqan:Shortcut.Dna5String.
*Accordingly, when using seqan:Spec.Dna or seqan:Spec.DnaQ, only the characters <tt>'C'</tt>, <tt>'G'</tt>, <tt>'A'</tt>, and <tt>'T'</tt> are allowed.
*When omitting the <tt>qual</tt> parameter when reading FASTQ, the quality values from the file will be ignored.
</pre>

<pre>#AssignmentBox
'''Assignment 1:''' Record-Wise Reading Sequences into seqan:Shortcut.CharString
 Type ::
  Review
 Objective ::
  Modify the example above to read the sequence into a seqan:Shortcut.CharString instead of a seqan:Shortcut.Dna5String.
 Hint ::
 Solution ::
  Click ''more...'' to see the solution.

<pre>#FoldOut
----
[[Include(source:/trunk/core/demos/tutorial/sequence_io/solution1.cpp)]]
</pre>
</pre>

When we want to read a whole sequence (e.g. FASTA or FASTQ) file into memory then we only have to slightly adjust the example from above.
For example, here is how we can read a whole FASTQ file into memory using the function seqan:Function.read into [seqan:Class.StringSet StringSets] of [seqan:Shortcut.CharString CharStrings] and [seqan:Shortcut.Dna5String Dna5Strings].

<pre>#comment
<pre>#WarningBox
For a short time, <tt>read()</tt> will still be called <tt>read2()</tt> because of name clashes with the old I/O system.
</pre>
</pre>

[[Include(source:/trunk/core/demos/tutorial/sequence_io/example4.cpp)]]

<pre>#AssignmentBox
'''Assignment 2:''' Document-Wise Reading Sequences into seqan:Shortcut.CharString
 Type ::
  Review
 Objective ::
  Modify the example above to read the sequence into a seqan:Class.StringSet of [seqan:Shortcut.CharString CharStrings] instead of a [seqan:Shortcut.Dna5String Dna5Strings].
 Hint ::
 Solution ::
  Click ''more...'' to see the solution.

<pre>#FoldOut
----
[[Include(source:/trunk/core/demos/tutorial/sequence_io/solution2.cpp)]]
</pre>
</pre>

=== Choice of Record Reader ===

In most cases, you will want to use a seqan:"Spec.Single-Pass RecordReader" for reading files.
Mostly, it is the fastest and best way to read files and also all file formats have a single-pass implementation.

Using a double-pass record reader almost only makes sense if read a whole file into main memory using the document reading API:
The file is read twice.
In the first pass, the total length of ids and sequence characters is determined.
When reading sequences into [seqan:Class.StringSet StringSets], the exact number of elements can be reserved.
Even more, when using [seqan:Spec.ConcatDirect ConcatDirected StringSets], no superflous memory has to be allocated at all.
The string sets are then filled in the second pass.

Using double-pass I/O also only makes sense for document reading when used in conjunction with [seqan:"Spec.MMap String" MMap Strings].
When using streams, the seqan:Class.RecordReader has to buffer the read data in memory because not all stream implementation allow for jumping.
In the case of [seqan:"Spec.MMap String" MMap Strings], no buffer is used because the record reader directly operates on the memory mapped file (and thus directly on the disk buffers of the kernel).

<pre>#AssignmentBox
'''Assignment 3:''' Using a seqan:"Spec.Double-Pass RecordReader" with a seqan:"Spec.MMap String".
 Type ::
  Application
 Objective ::
  Change solution of Assignment 2 such that a seqan:"Spec.Double-Pass RecordReader" is used with a seqan:"Spec.MMap String".
 Hint ::
  You can open files into MMap Strings as follows (include the <tt><seqan/file.h></tt> header):

  <pre>#cpp
typedef seqan::String<char, seqan::MMap<> > TMMapString;
TMMapString mmapString;
bool success = open(mmapString, "filename.fa", seqan::OPEN_RDONLY);
  </pre>
  
  You can then define a seqan:"Spec.Double-Pass String RecordReader" wrapping the just opened <tt>mmapString</tt> as follows:

  <pre>#cpp
typedef seqan::RecordReader<
        TMMapString,
        seqan::DoublePass<seqan::StringReader> > TReader;
TReader reader(mmapString);
  </pre>
 Solution ::
  Click ''more...'' to see the solution.

<pre>#FoldOut
----
[[Include(source:/trunk/core/demos/tutorial/sequence_io/solution3.cpp)]]
</pre>
</pre>

=== Auto Format Detection ===

Passing the format as the tag is appropriate when the format is known beforehand.
Otherwise, you can use a variable of type seqan:Shortcut.AutoSeqStreamFormat instead of the tag.

seqan:Shortcut.AutoSeqStreamFormat objects can be first passed to the function seqan:Function.guessStreamFormat.
This function tries to parse the file as different formats on the first some thousand bytes.
When this succeeds, the successfully recognized file type is stored in the object.

You can then subsequently use the seqan:Shortcut.AutoSeqStreamFormat instead of a tag to the functions seqan:Function.readRecord or seqan:Function.read.

[[Include(source:/trunk/core/demos/tutorial/sequence_io/example9.cpp)]]

<pre>#AssignmentBox
'''Assignment 4:''' Using seqan:Shortcut.AutoSeqStreamFormat
 Type ::
  Application
 Objective ::
  Adjust the solution of Assignment 3 to use a seqan:Shortcut.AutoSeqStreamFormat for format detection.
 Solution ::
  Click ''more...'' to see the solution.

<pre>#FoldOut
----
[[Include(source:/trunk/core/demos/tutorial/sequence_io/solution6.cpp)]]
</pre>
</pre>

<pre>#InfoBox
'''Information:''' Qualities and FASTA files.

When passing a <tt>qual</tt> parameter to seqan:Function.readRecord or seqan:Function.read then this cannot be filled with qualities from the file since FASTA files do not contain any.
Instead, the <tt>qual</tt> string will be empty after the call to seqan:Function.readRecord and after the call to seqan:Function.read, it will be a string set with empty entries.
The string set will have a size that is equal to the number of records in the file.
</pre>

=== Writing Sequence Files ===

Similar to reading, sequence files can be written record-by-record or as a whole.

For record-wise writing, we use the function seqan:Function.writeRecord.
This function expects as parameters, the seqan:Concept.StreamConcept to write to, the data to write, followed by the format tag.
The following example writes an identifier and a sequence seqan:Class.StringSet record-by-record to stdout.

[[Include(source:/trunk/core/demos/tutorial/sequence_io/example6.cpp)]]

The result on the console looks like this:

<pre>#ShellBox
>id1
CGATCGATCGAT
>id2
AAAAAAAAAAAA
</pre>

<pre>#AssignmentBox
'''Assignment 5:''' Writing out FASTQ.
 Type ::
  Application
 Objective ::
  Change the example above such that the two sequences are written as FASTQ with qualities.
  Use the quality strings <tt>"IIIIIIIIIHII"</tt> and <tt>"IIIIIIIIIIII"</tt>.
 Hint ::
  Simply use a new seqan:Class.StringSet <tt>quals</tt> of seqan:Shortcut.CharString, append the quality strings, and modify the line with the <tt>writeRecord()</tt> call.
 Solution ::
  Click ''more...'' to see the solution.

<pre>#FoldOut
----
[[Include(source:/trunk/core/demos/tutorial/sequence_io/solution5.cpp)]]

The output looks as follows:

<pre>#ShellBox
@id1
CGATCGATCGAT
+
IIIIIIIIIHII
@id2
AAAAAAAAAAAA
+
IIIIIIIIIIII
</pre>
</pre>
</pre>

For writing out whole string sets at once, we use the function seqan:Function.write.
The transition from record-wise writing to writing whole string sets is of similar simplicity as for reading:

<pre>#comment
<pre>#WarningBox
For a short time, <tt>write()</tt> will still be called <tt>write2()</tt> because of name clashes with the old I/O system.
</pre>
</pre>

[[Include(source:/trunk/core/demos/tutorial/sequence_io/example8.cpp)]]

=== Using MultiSeqFile ===

<pre>#comment
<pre>#WarningBox
Deprecate <tt>MultiSeqFile</tt> in favour of <tt>FaiIndex</tt>?
</pre>
</pre>

The class seqan:Shortcut.MultiSeqFile (which actually is a shortcut to a memory mapped string set) allows to read sequence files in a two-pass approach:
First, the file is read and the start positions of each sequence record in the file is stored in memory.
The file is kept open as a memory mapped file.

Then, we can access the identifier, sequence, and quality string of a record using functions such as seqan:Function.assignSeqId.

Indexed reading can be done through seqan:Shortcut.MultiSeqFile which is a shortcut to a memory mapped string set.
We open the file using seqan:Function.open on its <tt>concat</tt> member (which is a seqan:"Spec.MMap String").
The function seqan:Function.split then parses the file contents and sets the separating indexes of the seqan:Class.StringSet.
For this, we need the file format.
We could give a specify format in the tag (e.g. <tt>seqan::Fastq()</tt>) or use seqan:Class.AutoSeqFormat together with seqan:Function.guessFormat.

The following example [source:tags/seqan-1.4.0/core/demos/tutorial/sequence_io/example5.cpp (full source)] demonstrates how to use seqan:Shortcut.MultiSeqFile to read sequence files.
First, we include the necessary headers and start our <tt>main()</tt> function.

[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/sequence_io/example5.cpp, fragment=includes-main)]]

Then, we declare the seqan:Shortcut.MultiSeqFile object and open it with the value of <tt>argv[1]</tt>.
If no parameters are given then we exit the program with status code <tt>1</tt>.

[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/sequence_io/example5.cpp, fragment=open)]]

This is followed by using seqan:Class.AutoSeqFormat for guessing the sequence file type.

[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/sequence_io/example5.cpp, fragment=guess)]]

After guessing the file type, we can now use this knowledge to compute the start positions of each record using the function seqan:Function.split.

[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/sequence_io/example5.cpp, fragment=split)]]

After the call to seqan:Function.split, we can get the number of sequences in the file using the function seqan:Function.length.
We declare the [seqan:Class.StringSet StringSets] for storing the sequences and sequence ids and reserve the exact space for the number of elements we need.

[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/sequence_io/example5.cpp, fragment=load)]]

Then, we declare some buffers for storing the sequence id, characters, and the quality values.

[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/sequence_io/example5.cpp, fragment=buffers)]]

Now, we can access the sequence, qualities and ids using the functions seqan:Function.assignSeq, seqan:Function.assignQual, and seqan:Function.assignSeqId.
Note that these functions still have to do some parsing of the input file.
The number of sequences is the same as the number of entries in the <tt>MultiSeqFile</tt> <tt>StringSet</tt> as returned by seqan:Function.length.

In the following loop, we first extract the sequences, qualities, and the sequence id.
Then, the qualities are stored in the seqan:Spec.Dna5Q letters of the string.
The sequence with qualities and the sequence ids are then stored in the variables <tt>seqs</tt> and <tt>seqIDs</tt> we allocated above.

[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/sequence_io/example5.cpp, fragment=output)]]

Finally, we return the status code <tt>0</tt> at the end of our <tt>main()</tt> function.

[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/sequence_io/example5.cpp, fragment=return)]]

Indexed reading has multiple advantages:

*Its performance is only slightly worse than when reading sequentially with a double-pass String RecordReader.
*The input file is mapped into main memory and otherwise complicated page-wise memory management is done by the operating system and does not have to be implemented by the user:
   The user can access the file almost at random and only the used parts will be loaded into main memory.
   This is quite efficient when only few sequences are needed.

If you need to have fast random access to all sequences in a file then loading it into a seqan:Spec.ConcatDirect StringSet with the batch-reading API is faster than using seqan:Shortcut.MultiSeqFile.

<pre>#AssignmentBox
'''Assignment 6:''' MultiSeqFile Review
 Type ::
  Review
 Objective ::
  Change the example above, so the sequence file that is read is written to the user in a TSV format.
  For each record in the input file with id <tt>${ID}</tt>, sequence <tt>${SEQ}</tt>, and quality string <tt>${QUAL}</tt>, write out a line <tt>${ID}\t${SEQ}\t${QUAL}</tt>.
 Solution ::
  Click ''more...'' to see the solution.

<pre>#FoldOut
----
<pre>#cpp
#include <seqan/file.h>
#include <iostream>

int main (int argc, char const ** argv)
{
    seqan::MultiSeqFile multiSeqFile;
{| border=1 class="simple"
! open(multiSeqFile.concat, argv[1], seqan::OPEN_RDONLY))
|}

        return 1;

    seqan::AutoSeqFormat format;
    guessFormat(multiSeqFile.concat, format);
    split(multiSeqFile, format);

    seqan::String<seqan::Dna5> seq;
    seqan::CharString qual;
    seqan::CharString id;

    for (unsigned i = 0; i < seqCount; ++i)
    {
        assignSeq(seq, multiSeqFile[i], format);    // read sequence
        assignQual(qual, multiSeqFile[i], format);  // read ascii quality values
        assignSeqId(id, multiSeqFile[i], format);   // read sequence id
        
        std::cout << id << '\t' << seq << '\t' << qual << '\n';
    }

    return 0;
}
</pre>
</pre>
</pre>

=== Next Steps ===

*Read the Wikipedia articles about the [http://en.wikipedia.org/wiki/FASTA_format FASTA file format] and the [http://en.wikipedia.org/wiki/FASTQ_format FASTQ file format and quality values] to refresh your knowledge.
*Read the [[Tutorial/BasicSequenceIO| Basic Sequence I/O]] tutorial to learn how to use the seqan:Class.SequenceStream class.
*Read the [[Tutorial/IndexedFastaIO| Indexed FASTA I/O]] tutorial to learn how to read FASTA files efficiently in a random-access fashion.
*Continue with the [[Tutorial| rest of the tutorials]].

==== Submit a Comment ====

If you found a mistake, or have suggestions about an improvement of this page:
[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/SequenceFileIO&type=enhancement submit your comment]



{{TracNotice|{{PAGENAME}}}}