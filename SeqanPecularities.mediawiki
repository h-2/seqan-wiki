
== SeqAn Pecularities ==

This could also be called "Seqan Gotchas".

=== Generated Forwards ===

'''TODO'''

=== Function <tt>length</tt> Always Returns 1 ===

'''Problem:'''
For some reason, seqan:Function.length always returns 1.

'''Reason:'''
Currently, seqan:Function.length is defined for all types.
If the argument is not a container, the return value is 1.

=== <tt>append</tt> appends each single character seperately instead of the whole String to String of Strings  ===

'''Problem:'''
When trying to append a String to a String of String not the string as whole but lots of String of a String character are appended.

'''Reason:'''
Actually, appendValue had to be used instead of append in this case.
The behaviour described is a result of the pecularity above.
append in this case interprets the container to be appended as a String of Strings and characters are interpreted as Strings of length 1.

We are aware of this problem and plan to fix it in a future release.

=== Default Function Arguments ===

You cannot provide default arguments for functions.
The reason lies in the [#GeneratedForwards generated forwards].
Because of the reasons outlied in their description, the declaration of functions and templates has to be included before any actual definitions.

Default parameters can only provided once in C++.
Since the forwards are included before the actual definition, they would have to provide the default value definition.
However, this would mean the default parameter would have to be removed in the original source files.
Modifying the original source is not desirable.
Thus, the default value would appear after the original declaration.

Consider the following example.

<pre>
#cpp
template <typename T>
inline void foo(cont T& x, int i = 0)
{
  // ...
}
</pre>

The forwards generation script would make the following out of this:

<pre>
#cpp
template <typename T>
inline void foo(cont T& x, int i);
</pre>

Now, when the generated forwards file is included, the compiler will see this:

<pre>
#cpp
template <typename T>
inline void foo(const T& x, int i);

// ...

template <typename T>
inline void foo(const T& x, int i = 0)
{
  // ...
}
</pre>

and seemingly, for some reason cannot find the function with the default parameter any more.

==== Solution ====

Create two functions.
One with the parameter that is to have a default, one without.
The second function calls the first function with the default parameter:

<pre>
#cpp
template <typename T>
inline void foo(const T& x)
{
  foo(x, 0);
}

template <typename T>
inline void foo(const T& x, int i)
{
  // ...
}
</pre>

=== My <tt>begin</tt> And <tt>end</tt> Functions Are Not Called ===

'''Problem:'''
You write functions <tt>begin</tt> and <tt>end</tt> for your objects but they are not called.
Instead, you get weird error messages saying you cannot cast <tt>seqan::Iter<Your Type>::Type</tt> to some other type.

'''Explanation:'''
There is a default implementation of <tt>begin</tt> and <tt>end</tt> with one parameter.
These functions forward to functions <tt>begin</tt> and <tt>end</tt> with a second tags parameter.
This tag selects the kind of iterator (i.e. standard or rooted iterator)

'''Solution:'''
None as of yet.



{{TracNotice|{{PAGENAME}}}}