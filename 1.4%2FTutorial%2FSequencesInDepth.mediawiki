
'''Note: this page documents the 1.4 version of SeqAn, see [[Tutorial]] if you need the documentation for the trunk version.'''
==  Sequences In-Depth ==

[[TOC()]]

 Learning Objective :: You will learn in detail how to optimize the usage of sequences dependent on your needs.
 Difficulty :: Advanced
 Duration :: 20min
 Prerequisites :: [[Tutorial/Sequences]]

Sequences, particularly [seqan:Class.String String]s, are fundamental in SeqAn. 
You learned already how to use the default implementation of strings and how to easily work with them. 
In the most cases the default string specialization is well suited as well as the default behavior for capicity changes. 
Nevertheless, sometimes you might want to change the default behavior for efficiency reasons and adjust it to your specific needs.

=== String Specializations ===

In this section you will learn about the different string specializations and when to use them.

The user can specify the kind of string that should be used in an optional second template argument of seqan:Class.String.

<pre>#cpp
String<Dna>           dnaSeq1; // The default string implementation: Alloc
String<Dna, Alloc<> > dnaSeq2; // The same as above 
</pre>

In most cases, the implementation seqan:"Spec.Alloc String" (the default when using a <tt>String<T></tt>) is the best choice.
Exceptions are when you want to process extremely large strings that are a bit larger than the available memory (consider seqan:"Spec.Alloc String") or much larger so most of them are stored on the hard disk and only parts of them are loaded in main memory (consider seqan:"Spec.External String").

The following table decribes in detail the different specializations:

{| border=1 class="simple"
!'''Specialization'''
!'''Description'''
!'''Applications'''
!'''Limitations'''
|- 
| seqan:"Spec.Alloc String"
| Expandable string that is stored on the heap.
| The default string implementation that can be used for general purposes.
| Changing the seqan:Function.capacity can be very costly since all values must be copied.
|- 
| seqan:"Spec.Array String"
| Fast but non-expandable string.
| Fast storing of fixed-size sequences.
| [seqan:Function.capacity Capacity] must already be known at compile time. Not suitable for storing large sequences.
|- 
| seqan:"Spec.Block String"
| String that stores its sequence characters in blocks
| The [seqan:Function.capacity capacity] of the string can quickly be increased. Good choice for growing strings or stacks.
| Iteration and random access to values is slightly slower than for [seqan:"Spec.Alloc String" Alloc Strings].
|- 
| seqan:"Spec.Packed String"
| A string that stores as many values in one machine word as possible.
| Suitable for storing large strings in memory.
| Slower than other in-memory strings.
|- 
| seqan:"Spec.External String"
| String that is stored in secondary memory.
| Suitable for storing very large strings (>2GB). Parts of the string are automatically loaded from secondary memory on demand.
| Slower than other string classes.
|- 
| seqan:"Spec.CStyle String"
| Allows adaption of strings to C-style strings.
| Used for transforming other String classes into C-style strings (i.e. null terminated char arrays). Useful for calling functions of C-libraries.
| Only reasonable if value type is char or wchar_t.
|}


Examples:

<pre>
#cpp
// String with maximum length 100.
String<char, Array<100> > myArrayString;
// String that takes only 2 bits per nucleotide.
String<Dna, Packed<> > myPackedString;
</pre>

=== Overflow Strategies ===

The following section will describe how you can improve capacity changes for your sequences.

Each sequence object has a capacity, i.e. the reserved space for this object.
The capacity can be set explicitly by functions such as seqan:Function.reserve or seqan:Function.resize.
It can also bet set implicitly by functions like seqan:Function.append, seqan:Function.assign, seqan:Function.insert or seqan:Function.replace, if the operation's result exceeds the length of the target sequence.

If the current capacity of a sequence is exceeded by chaning the length, we say that the sequence overflows.
There are several overflow strategies that determine what actually happens when a string should be expanded beyond its capacity.
The user can specify this for a function call by additionally handing over a tag.
If no overflow strategy is specified, a default overflow strategy is selected depending on the type of the sequence.

The following overflow strategies exist:

{| border=1 class="simple"
! '''Tag''' 
! '''Description''' 
|- 
|  [seqan:"Tag.Overflow Strategy" Exact] 
|  Expand the sequence exactly as far as needed.  The capacity is only changed if the current capacity is not large enough. 
|- 
|  [seqan:"Tag.Overflow Strategy" Generous] 
|  Whenever the capacity is exceeded, the new capacity is chosen somewhat larger than currently needed.  This way, the number of capacity changes islimited in a way that resizing the sequence only takes amortized constant time. 
|- 
|  [seqan:"Tag.Overflow Strategy" Limit] 
|  Instead of changing the capacity, the contents are limited to current capacity.  All values that exceed the capacity are lost. 
|- 
|  [seqan:"Tag.Overflow Strategy" Insist] 
|  No capacity check is performed, so the user has to ensure that the container's capacity is large enough. 
|}


The next example illustrates how the different strategies could be used:

<pre>#cpp
String<Dna> dnaSeq;
// Sets the capacity of dnaSeq to 5.
resize(dnaSeq, 4, Exact());
// Only "TATA" is assigned to dnaSeq, since dnaSeq is limited to 4.
assign(str, "TATAGGGG", Limit());
std::cout << dnaSeq << std::endl;
// Use the default expansion strategy.
append(str, "GCGCGC");
std::cout << dnaSeq << std::endl;
</pre>

<pre>#ShellBox
TATA
TATAGCGCGC
</pre>

<pre>#AssignmentBox
==== Workshop Assignment 1 ====
 Type ::
  Review
 Objective :: 
  Build a string of Dna (default specialization) and use the function <tt><tt><tt>appendValue</tt></tt><tt> to append a million times the nucleotide 'A'. Do it both using the overflow strategy </tt><tt><tt>Exact</tt></tt><tt> and </tt><tt><tt>Generous</tt></tt></tt>. Messure the time for the two different strategies.
 Solution :: 
  Click ''more...'' to see the solution.
<pre>#FoldOut
----
[[Include(source:tags/seqan-1.4.0/core/demos/tutorial/sequences_in_depth/assignment_exact_generous_solution.cpp)]]
</pre>

</pre>

=== Submit a  comment ===
If you found a mistake, or have suggestions about an improvement of this page press:
[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]



{{TracNotice|{{PAGENAME}}}}