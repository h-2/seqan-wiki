
== Style Guide Decisions ==

This has been superseded with [[StyleGuide/Cpp| SeqAn C++ Style Guide]].

<pre>
#comment
[[TOC()]]

=== Naming Schemes ===

I think we agreed on most of the naming schemes at the last retreat.
This is more of a reminder.

In the following, "SA" is a two-char abbreviation (for "suffix array"), "LCP" is a three-char abbreviation (for "longest common prefix").

==== File Names ====

File names are lower case, different words are separated by underscores:

*''index/find_swift.h''
*''find_motif/motif_finder_base.h''

==== Macros ====

Macros are all upper case. Individual words separated by an underline.

<pre>
#cpp
#define SEQAN_MY_MACRO x
#define SEQAN_SA_VALUE y
#define SEQAN_LCP_TABLE z
</pre>

==== Structs / Classes ====

Structs and classes are in Camel Case notation (each beginning  of a word/abbreviation is capitalized).

<pre>
#cpp
struct MyStruct;
struct SAValue;
struct LcpTable;
</pre>

==== Metafunctions ====

Same as structs and classes, boolean types with <tt>TypeStyle</tt> constants with <tt>CONSTANT_STYLE</tt>.

<pre>
#cpp
struct MyStruct
{
  typedef True Value;
  enum { VALUE = 1 };  // OR
  static int const VALUE;  // initialized outside
};

struct SAValue;
struct LcpTable;
</pre>

==== Functions ====

Internal functions are preceded with an underline and start with a lowercase letter.

<pre>
#cpp
void _internalFunction();
void publicFunction();
void _publicFunctionFirstHelper();
void _publicFunctionSecondHelper();
void _publicFunctionThirdHelper();

int saValue();
int lcpValue();
int getSAValue();
int getLcpValue();
</pre>

==== Variables ====

<pre>
#cpp
int i;
char * myString;
char * myLongName;

int saValue;
int lcpValue;
int mySAValue;
int myLcpValue;
</pre>

=== Formatting ===

==== Line Length ====

Too long lines make code hard to read, wrapping code by semantic is not supported by all editors.
Too short lines waste space on modern screens.

==== A: 120 characters (Manuel, Birte, Enrico, Dave) ====

Good compromise.

==== B: 80 characters ====

Classic terminal width.

==== C: no limit (AK, Knut) ====

Let the editor handle this.

==== Exceptions To Line Length ====

==== A: Manuel's proposal (Manuel, Knut, Birte, Enrico, Dave) ====

*DDDoc comments can be longer because dddoc might interpret whitespace inside lines.
*TODO commands can be longer so the whole line is seen when grepping for TODO, should also be better for tools like Eclipse that can extract inline TODO comments.
*Include guards (<tt>#ifndef PATH_TO_HEADER_H_</tt>) can be longer if the paths are longer.

==== B: Changes to A ====

==== C: None ====

==== Non-ASCII Characters ====

All files should be in UTF-8 coding.
It can be good to avoid Non-ASCII characters since editors and terminals might have problems with them.

==== A: Avoid Non-ASCII  ====

*Make all files UTF-8, avoid non-ASCII characters nevertheless.
*In strings, use UTF-8 coding, for example, "\xEF\xBB\xBF" is the Unicode zero-width no-break space character, which would be invisible if included in the source as straight UTF-8.
*In comments, use ss instead of ß, "a instead of ä etc.

==== B: Changes to A (Manuel, Birte, AK, Dave, Knut) ====
*Same as A except ae instead of ä

==== C: Don't Care/No Limitation ====

*Everything is allowed.

==== Spaces Vs. Tabs ====

This can lead to lengthy discussions.
We once agreed that we wanted to have indentation of width 4.
So, if tabs are allowed, they should have a width of 4.

==== A: No Tabs (Manuel, Enrico) ====

There can be problems when indenting in for loops, for example.
Consider the following (<tt>-->|</tt> is a tab, <tt>_</tt> is a space):

<pre>
#cpp
for (int i = 0, j = 0, k = 0, ...;
<u>_</u>cond1 && cond2 &&; ++i)
{
  // ...
}
</pre>

Here, indentation can happen up to match the previous line.
Mixing tabs and spaces works, too.
However, since tabs are not shown in the editor, people might indent a file with mixed tabs and spaces with spaces if they are free to mix tabs and spaces.

<pre>
#cpp
for (int i = 0, j = 0, k = 0, ...;
-->|_cond1 && cond2 &&; ++i)
{
  // ...
}
</pre>

Pure tabs for indentation cannot indent up to match the previous line.

<pre>
#cpp
// EITHER
for (int i = 0, j = 0, k = 0, ...;
-->|cond1 && cond2 &&; ++i);
// OR
for (int i = 0, j = 0, k = 0, ...;
-->|-->|cond1 && cond2 &&; ++i);
</pre>

==== B: Use Tabs and mix with spaces ====

==== C: Use Tabs, don't mix with spaces ====

==== D: Don't Care/No Limitation (Birte, AK, Dave, Knut) ====

==== Indentation ====

We want to have an indentation width of 4, tabs/spaces not decided yet.

Namespaces are not indented, this only wastes horizontal space since all library code would be indented by one level.

==== Trailing: Whitespace ====

==== A: Not allowed (Manuel, Knut, Birte, Enrico, Dave) ====

Trailing whitespace is not visible, leading whitespace for indentation is perceptible through the text following it.
Anything that cannot be seen can lead to "trash changes" in the SVN when somebody accidently removes it.

==== B: Allowed ====

==== Inline Comments ====

<pre>
#cpp
int x;// no space
int y; // one space
int z;  // two spaces
</pre>

==== A: Should be separated by two spaces ====

Makes them easier to pick out.

==== B: Should be separated by one space ====

==== C: Should be separated by at least one space (AK, Enrico, Dave) ====

==== D: Should be separated by at least two spaces (Manuel, Knut, Birte) ====

<pre>
#comment
#cpp
int x;      // many  space
int ylong;  // two space
int z;      // many spaces
</pre>


==== E: Don't care ====

==== Brace Position ====

==== A: Manuel's Proposal (Manuel, Birte) ====

*Namespace braces are inlined
*Function, struct, class braces go to the next line.
*All others stay inline.
*Braces in if/then/else are '''either''' there for all cases '''or''' for none.
*Wrap long conditional lines to the paranthesis.

<pre>
#cpp
namespace seqan {

class MyStruct
{
public:
    MyStruct & operator=(MyStruct const & other)
    {
        // ...
    }
};

void foo(MyStruct & s)
{
    switch (bar(s)) {
        // ...
    }

    if (bar2(s)) {
        // ...
{| border=1 class="simple"
! b 
! c 
! d 
! ... 
!
|}

{| border=1 class="simple"
! y 
! z) {
|}

        
    } else {
        // ...
    }
    
    while (x) {
        // ...
    }
    
    do {
        
    } while (false);

    // NOT!
    if (x)
        statement;
    else {
        statement;
        statement;
    }
}

}  // namespace seqan
</pre>

==== B: Braces always on new line (Knut, Enrico, Dave) ====

<pre>
#cpp
namespace seqan {

class MyStruct
{
public:
    MyStruct & operator=(MyStruct const & other)
    {
        // ...
    }
};

void foo(MyStruct & s)
{
    switch (bar(s)) 
    {
        // ...
    }

    if (bar2(s)) 
    {
        // ...
    } 
    else 
    {
{| border=1 class="simple"
! b 
! c 
! d 
! ... 
!
|}

{| border=1 class="simple"
! y 
! z)
|}

        {
        
        } 
        else 
        {
           // ...
        }
    }
    
    while (x) 
    {
        // ...
    }
    
    do 
    {
        
    } while (false);

</pre>

==== C: Other ====

==== Conditionals, Loops ====

==== A: Manuel's Proposal (Manuel, Knut, Birte, Enrico, Dave) ====

There is one space after the <tt>for</tt>/<tt>while</tt> keyword.
There is no space inside the parantheses.
There is one space after a semicolon.
There is one space before an opening/closing brace and the preceding/following stuff.

<pre>
#cpp
for (int i = 0; i < 10; ++i) {
    // ...
}

{| border=1 class="simple"
! c == e) {
|}

    // ...
}

do {
    // ...
} while (x == 0;)
</pre>

==== B: Other ====

==== Expressions ====

==== A: Manuel's Proposal (Knut, Birte, Enrico, Dave) ====

Binary expressions are surrounded by one space.
Unary expressions are preceded by one space.

<pre>
#cpp
{| border=1 class="simple"
! c == d 
! e == f 
! x) {
|}

    // ...
}

bool y = x;
unsigned i = ~j;
</pre>

==== B: Other ====

==== Return Type in Functions ====

==== A: Manuels' Proposal (Manuel, Knut, Birte, Enrico, Dave) ====

If a function definition is short, everything is on the same line.
Otherwise, split.

<pre>
#cpp
int foo();

template <typename TString>
typename Value<TString>::Type
anotherFunction(TString const & foo, TString const & bar, /*...*/)
{
    // ...
}
</pre>

==== B: Other ====

==== <tt>inline</tt> in functions ====

==== A: Manuel's Proposal (Manuel) ====

If a function definition is short, everything is on the same line.
Otherwise, split.

<pre>
#cpp
inline int foo();

template <typename TString>
inline
typename Value<TString>::Type
anotherFunction(TString const & foo, TString const & bar, /*...*/)
{
    // ...
}
</pre>

==== B: <tt>inline</tt> and return type (Birte, AK, Enrico, Dave, Knut) ====

If a function definition is short, everything is on the same line.
Otherwise put <tt>inline</tt> and return type in the same line.

<pre>
#cpp
inline int foo();

template <typename TString>
inline typename Value<TString>::Type
anotherFunction(TString const & foo, TString const & bar, /*...*/)
{
    // ...
}
</pre>

==== C: Other ====

==== Function Argument List ====

==== A: Manuel's Proposal ====

If it fits in one line, keep in one line.
Otherwise, wrap at the paranthesis.
For very long function names and parameter lines, break after opening bracket, indent by one level and keep each argument on a separate line.

<pre>
#cpp
template <typename TA, typename TB>
inline void foo(TA & a, TB & b);

template </*...*/>
inline void foo2(TA & a, TB & b, TC & c, TD & d, ...
                 TY & y, TZ & z);
                
template </*...*/>
inline void _functionThisIsAVeryVeryLongFunctionNameSinceItsAHelper(
    TThisTypeWasMadeToForceYouToWrapInTheLongNameMode & a,
    TB & b,
    TC & c,
    TB & d,
    ...);
</pre>

==== B: Changes to A (Manuel, Knut, Birte, AK, Enrico, Dave) ====

Same as A, but if wrapped, then each argument on a separate line even.

<pre>
#cpp

template </*...*/>
inline void foo2(TA & a,
                 TB & b,
                 ...
                 TY & y,
                 TZ & z);
</pre>


==== C: Other ====

==== Function Calls ====

==== A: Manuel's Proposal ====

Similar to Function Argument List Definition above.

<pre>
#cpp
foo(a, b);

foo2(a, b, c, ...
     x, y, z);

if (x) {
    if (y) {
        _functionThisIsAVeryVeryLongFunctionNameSinceItsAHelper(
            firstParameterWithALongName,
            b,
            c,
            d);
    }
}
</pre>

==== B: Changes to A (Knut, Birte, AK, Enrico, Dave) ====

If wrapped, not necessarily a separate line for each argument.

==== C: Other ====

==== Constructor Initialization List ====

==== A: Manuel's Proposal ====

If the whole function prototype fits in one line, keep it in one line.
Otherwise, put colon on next line, indent one level and put each argument on its own line.
Align the initialization list.

<pre>
#cpp
class Class
{
    MyClass()
        : member1(0),
          member2(1),
          member3(3)
    {}
};
</pre>

==== B: More often found in SeqAn ====

If the whole function prototype fits in one line, keep it in one line.
Otherwise, wrap line after column and put each argument on its own line indented by one level.
Align the initialization list.

<pre>
#cpp
class Class
{
    MyClass():
        member1(0),
        member2(1),
        member3(3)
    {}
};
</pre>

==== C: Modification of B (Manuel, Knut, Birte, Enrico, Dave) ====

Add a space before the colon to make it stand out more clearly.

<pre>
#cpp
class Class
{
    MyClass() :
        member1(0),
        member2(1),
        member3(3)
    {}
};
</pre>

==== D: Other ====

==== Visibility Specifier ====

==== A: Manuel's Proposal (Manuel, Knut, Birte, Enrico, Dave) ====

Should go on the same level as the <tt>class</tt> keyword.

<pre>
#cpp
class MyStruct
{
public:
protected:
private:
};
</pre>

==== B: Other ====

=== Semantics ===

==== Parameter Ordering ====

While not performed consistently throughout SeqAn, most code adheres to the following and was thought up this way by Andreas (iirc what Dave told me).

==== SeqAn Style ====

First, all target/modified parameters, then all source/const/non-modified parameters.
If there is only return value which is a builtin type such as <tt>int</tt>, <tt>bool</tt>, or a size/length/position type, it can be returned as the return value of the function itself.
For multiple return/modified parameters, the idea is that a function call to function <tt>f(t1, t2, ..., s1, s2, s3, ...)</tt> is like <tt>(t1, t2, t3, ...) <- f(s1, s2, s3, ...)</tt>.

==== Global Variables ====

Don't use them. Period.
What you can do is create a <tt>GlobalState</tt> struct for your applications and pass it to all functions in your program explicitely.

=== High Level Structure ===

==== Include Guards ====

For the <tt>#ifndef X...</tt> guards around headers.

==== A: Full Paths (Manuel, Knut, Enrico, Dave) ====

{| border=1 class="simple"
! '''filename''' 
! '''preprocessor symbol'''
|- 
|  core/include/seqan/basic/iterator_base.h 
|  <tt>CORE_INCLUDE_SEQAN_BASIC_ITERATOR_BASE_H_</tt> 
|}


Long but (mostly) non-ambiguous mapping between files and symbols.
Clear distinction between app, demo, test and library headers.

<pre>
#cpp
#ifndef CORE_INCLUDE_SEQAN_BASIC_ITERATOR_BASE_H_ 
#define CORE_INCLUDE_SEQAN_BASIC_ITERATOR_BASE_H_ 
#endif  // #ifndef CORE_INCLUDE_SEQAN_BASIC_ITERATOR_BASE_H_ 
</pre>

==== B: Relative Paths ====

{| border=1 class="simple"
! '''filename''' 
! '''preprocessor symbol'''
|- 
|  core/include/seqan/basic/iterator_base.h 
|  <tt>BASIC_ITERATOR_BASE_H_</tt> 
|}


Short but no distinction between app, test, demo or library headers.

<pre>
#cpp
#ifndef SEQAN_BASIC_ITERATOR_BASE_H_ 
#define SEQAN_BASIC_ITERATOR_BASE_H_ 
#endif  // #ifndef SEQAN_BASIC_ITERATOR_BASE_H_ 
</pre>

==== C: Old SeqAn Headers ====

{| border=1 class="simple"
! '''filename''' 
! '''preprocessor symbol'''
|- 
|  core/include/seqan/basic/iterator_base.h 
|  <tt>SEQAN_HEADER_ITERATOR_BASE_H</tt> 
|}


Short but ambiguities if there is a ''module1/header.h'' and a ''module2/header.h''.

<pre>
#cpp
#ifndef SEQAN_HEADER_ITERATOR_BASE_H
#define SEQAN_HEADER_ITERATOR_BASE_H
#endif  // #ifndef SEQAN_HEADER_ITERATOR_BASE_H
</pre>

==== General File Structure ====

==== A: Manuel's Proposal (Manuel, Knut, Birte, Enrico, Dave) '''UPDATE''' ====

<pre>
#cpp
// ==========================================================================
//                 SeqAn - The Library for Sequence Analysis
// ==========================================================================
// Copyright (c) 2006-2010, Knut Reinert, FU Berlin
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Knut Reinert or the FU Berlin nor the names of
//       its contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ==========================================================================
// Author: AUTHOR NAME <AUTHOR EMAIL>
// ==========================================================================
// SHORT COMMENT ON WHAT THIS FILE CONTAINS
// ==========================================================================

#ifndef CORE_INCLUDE_SEQAN_BASIC_ITERATOR_BASE_H_
#define CORE_INCLUDE_SEQAN_BASIC_ITERATOR_BASE_H_

namespace seqan {

// ==========================================================================
// Forwards
// ==========================================================================

// ==========================================================================
// Tags, Classes, Enums
// ==========================================================================

// ==========================================================================
// Metafunctions
// ==========================================================================

// --------------------------------------------------------------------------
// Metafunction MetafunctionName()
// --------------------------------------------------------------------------

// ==========================================================================
// Functions
// ==========================================================================

// --------------------------------------------------------------------------
// Function functionName()
// --------------------------------------------------------------------------

}  // namespace seqan

#endif  // CORE_INCLUDE_SEQAN_BASIC_ITERATOR_BASE_H_
</pre>
</pre>



{{TracNotice|{{PAGENAME}}}}